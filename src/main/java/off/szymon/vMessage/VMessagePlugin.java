package off.szymon.vMessage;

import com.google.inject.Inject;
import com.velocitypowered.api.command.CommandManager;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.event.proxy.ProxyShutdownEvent;
import com.velocitypowered.api.plugin.Dependency;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.plugin.PluginContainer;
import com.velocitypowered.api.plugin.annotation.DataDirectory;
import com.velocitypowered.api.proxy.ProxyServer;
import off.szymon.vMessage.compatibility.LuckPermsCompatibilityProvider;
import off.szymon.vMessage.compatibility.mute.EmptyMuteCompatibilityProvider;
import off.szymon.vMessage.compatibility.mute.LibertyBansCompatibilityProvider;
import off.szymon.vMessage.compatibility.mute.LiteBansCompatibilityProvider;
import off.szymon.vMessage.compatibility.mute.MutePluginCompatibilityProvider;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;

import java.io.File;
import java.nio.file.Path;
import java.util.Map;

@Plugin(
        id = "vmessage",
        name = "vMessage",
        version = off.szymon.vmessage.template.Version.VERSION, // Generated by the build system!
        description = "The #1 plugin for velocity message syncing",
        authors = {"SzymON_OFF"},
        dependencies = {
                @Dependency(id = "signedvelocity"),
                @Dependency(id = "luckperms", optional = true),
                @Dependency(id = "libertybans", optional = true),
                @Dependency(id = "litebans", optional = true)
        }
)
public class VMessagePlugin {

    private static VMessagePlugin instance;

    private final ProxyServer server;
    private final Logger logger;
    private final File dataFolder;
    private final PluginContainer plugin;
    private final String name;
    private MutePluginCompatibilityProvider mutePluginCompatibilityProvider;
    private LuckPermsCompatibilityProvider lpCompatibilityProvider;
    private Broadcaster broadcaster;

    @Inject
    public VMessagePlugin(ProxyServer server, Logger logger, @DataDirectory Path dataFolder, PluginContainer plugin) {
        instance = this;

        this.server = server;
        this.logger = logger;
        this.dataFolder = new File(dataFolder.toFile().getParentFile(), this.getClass().getAnnotation(Plugin.class).name());
        this.plugin = plugin;

        this.name = this.getClass().getAnnotation(Plugin.class).name();

        this.onLoad();
    }

    @Subscribe
    public void onProxyInitialization(ProxyInitializeEvent event) {
        this.onEnable();
    }

    @Subscribe
    public void onProxyShutdown(ProxyShutdownEvent event) {
        this.onDisable();
    }

    public void onLoad() {
        System.out.println(this.name + " loaded.");
    }

    public void onEnable() {
        Config.setup();

        /* LuckPerms */
        if (server.getPluginManager().isLoaded("luckperms")) {
            logger.info("LuckPerms detected, attempting to hook into it...");
            try {
                lpCompatibilityProvider = new LuckPermsCompatibilityProvider();
                logger.info("Successfully hooked into LuckPerms");
            } catch (Exception e) {
                lpCompatibilityProvider = null;
                logger.error("Failed to hook into LuckPerms, disabling support");
            }
        } else {
            logger.info("LuckPerms not detected, disabling support");
            lpCompatibilityProvider = null;
        }

        /* Mute Plugin Compatibility */
        Map<String, String> mutePlugins = Map.of("libertybans", "LibertyBans","litebans", "LiteBans");
        mutePluginCompatibilityProvider = new EmptyMuteCompatibilityProvider();
        logger.info("Checking for mute plugin compatibility...");
        for (Map.Entry<String, String> entry : mutePlugins.entrySet()) {
            String pluginName = entry.getKey();
            String displayName = entry.getValue();
            if (server.getPluginManager().isLoaded(pluginName)) {
                logger.info("{} detected, attempting to hook into it...", displayName);
                try {
                    switch (pluginName) {
                        case "libertybans":
                            mutePluginCompatibilityProvider = new LibertyBansCompatibilityProvider();
                            break;
                        case "litebans":
                            mutePluginCompatibilityProvider = new LiteBansCompatibilityProvider();
                            break;
                    }
                    logger.info("Successfully hooked into {}", displayName);
                    break;
                } catch (Exception e) {
                    mutePluginCompatibilityProvider = new EmptyMuteCompatibilityProvider();
                    logger.error("Failed to hook into {}, disabling support", displayName);
                }
            } else {
                logger.info("{} not detected, disabling support", displayName);
            }
        }

        broadcaster = new Broadcaster();
        server.getEventManager().register(this, new Listener());

        CommandManager cmdManager = server.getCommandManager();
        cmdManager.register(cmdManager.metaBuilder("vmessage").aliases("vm","vmsg").plugin(this).build(),new VMessageCommand().createCommand());
    }

    public void onDisable() {
        System.out.println(this.name + " disabled");
    }

    public ProxyServer getServer() {
        return server;
    }

    public Logger getLogger() {
        return logger;
    }

    public File getDataFolder() {
        return dataFolder;
    }

    public static VMessagePlugin getInstance() {
        return instance;
    }

    @Nullable("If LuckPerms is not loaded, this will return null")
    public LuckPermsCompatibilityProvider getLuckPermsCompatibilityProvider() {
        return lpCompatibilityProvider;
    }

    public MutePluginCompatibilityProvider getMutePluginCompatibilityProvider() {
        return mutePluginCompatibilityProvider;
    }

    public Broadcaster getBroadcaster() {
        return broadcaster;
    }

    public PluginContainer getPlugin() {
        return plugin;
    }
}
